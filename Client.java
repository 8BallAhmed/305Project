/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package cpit305project;

import static cpit305project.Client.clientAppointment;
import java.io.EOFException;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import static java.lang.System.in;
import java.net.ConnectException;
import java.net.Socket;
import java.net.UnknownHostException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Ahmed
 */
public class Client extends javax.swing.JFrame {

    Socket s;
    ServerWriter sw;
    ServerReader sr;
    static Appointment clientAppointment = null;
    static Appointee clientAppointee;
    static boolean connected = false;
    static ArrayList<VaccineCenter> vcList_server;
    static DefaultTableModel appointmentModel;
    static ArrayList<Appointment> appointments;

    /**
     * Creates new form Client
     */
    public Client() {
        initComponents();
        appointmentModel = (DefaultTableModel) appointmentTable.getModel();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        loginUser = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        loginPassword = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        registerUsername = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        registerPassword = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        registerSSN = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        registerAge = new javax.swing.JTextField();
        isDiabetic = new javax.swing.JCheckBox();
        isObese = new javax.swing.JCheckBox();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        appointmentTable = new javax.swing.JTable();
        appointmentIDTextField = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        bookButton = new javax.swing.JButton();
        cancelAppointmentButton = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        yourAppointments = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Username");

        jLabel2.setText("Password");

        jButton1.setText("Login");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(66, 66, 66)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton1)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2))
                        .addGap(57, 57, 57)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(loginPassword, javax.swing.GroupLayout.DEFAULT_SIZE, 186, Short.MAX_VALUE)
                            .addComponent(loginUser))))
                .addContainerGap(524, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(71, 71, 71)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(loginUser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(loginPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(45, 45, 45)
                .addComponent(jButton1)
                .addContainerGap(304, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Login", jPanel1);

        jLabel3.setText("Username");

        jLabel4.setText("Password");

        jButton2.setText("Register");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel5.setText("SSN");

        jLabel6.setText("Age");

        isDiabetic.setText("Diabetic");

        isObese.setText("Obese");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(34, 34, 34)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jButton2)
                                .addGap(270, 270, 270))
                            .addComponent(registerSSN, javax.swing.GroupLayout.PREFERRED_SIZE, 218, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(43, 43, 43)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5)
                            .addComponent(jLabel6))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(isObese)
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(registerPassword, javax.swing.GroupLayout.DEFAULT_SIZE, 218, Short.MAX_VALUE)
                                .addComponent(registerUsername, javax.swing.GroupLayout.DEFAULT_SIZE, 218, Short.MAX_VALUE)
                                .addComponent(registerAge)
                                .addComponent(isDiabetic)))))
                .addContainerGap(510, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(62, 62, 62)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(registerSSN, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(registerUsername, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(registerPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(registerAge, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(isDiabetic)
                .addGap(18, 18, 18)
                .addComponent(isObese)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 59, Short.MAX_VALUE)
                .addComponent(jButton2)
                .addGap(131, 131, 131))
        );

        jTabbedPane1.addTab("Register", jPanel2);

        appointmentTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Location", "Vaccine", "First Dose"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(appointmentTable);
        if (appointmentTable.getColumnModel().getColumnCount() > 0) {
            appointmentTable.getColumnModel().getColumn(0).setResizable(false);
            appointmentTable.getColumnModel().getColumn(1).setResizable(false);
            appointmentTable.getColumnModel().getColumn(2).setResizable(false);
            appointmentTable.getColumnModel().getColumn(3).setResizable(false);
        }

        jLabel7.setText("Appointment ID");

        bookButton.setText("Book Appointment");
        bookButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bookButtonActionPerformed(evt);
            }
        });

        cancelAppointmentButton.setText("Cancel Appointment");
        cancelAppointmentButton.setEnabled(false);
        cancelAppointmentButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelAppointmentButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(164, 164, 164)
                .addComponent(jLabel7)
                .addGap(18, 18, 18)
                .addComponent(appointmentIDTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(bookButton)
                .addGap(35, 35, 35)
                .addComponent(cancelAppointmentButton)
                .addContainerGap(235, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 389, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(appointmentIDTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7)
                    .addComponent(bookButton)
                    .addComponent(cancelAppointmentButton))
                .addContainerGap(63, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Book Appointments", jPanel3);

        yourAppointments.setText("You have no appointments.");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(63, 63, 63)
                .addComponent(yourAppointments)
                .addContainerGap(677, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(127, 127, 127)
                .addComponent(yourAppointments)
                .addContainerGap(375, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Your appointment(s)", jPanel4);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        if (!connected) {
            try {
                // JOptionPane.showMessageDialog(null, "Connection established to server!");
                s = new Socket("localhost", 8900);
                System.out.println("Connection Established to server!");
                sw = new ServerWriter(s);
                System.out.println("ServerWriter Created!");
                sr = new ServerReader(s, sw);
                sr.start();
                System.out.println("ServerReader Created!");
            } catch (ConnectException e) {
                System.out.println("Host not found!");
            } catch (IOException ex) {
                System.out.println("I/O Exception encountered!");
            }
            connected = true;
        }

        try {
            //if(sr == null){
            //  sr = new ServerReader(s);
            //}
            sw.writeAppointee(new Appointee(0, loginPassword.getText(), loginUser.getText(), 0, false, false, true));
        } catch (IOException ex) {
            System.out.println("I/O Exception caught!");
        } catch (NullPointerException e) {
            System.out.println("is sw null?: " + (sw == null));
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        if (!connected) {
            try {
                // JOptionPane.showMessageDialog(null, "Connection established to server!");
                s = new Socket("localhost", 8900);
                System.out.println("Connection Established to server!");
                sw = new ServerWriter(s);
                System.out.println("ServerWriter Created!");
                sr = new ServerReader(s, sw);
                sr.start();
                System.out.println("ServerReader Created!");
            } catch (ConnectException e) {
                System.out.println("Host not found!");
            } catch (IOException ex) {
                System.out.println("I/O Exception encountered!");
            }
            connected = true;
        }
        try {
            int ssn = Integer.parseInt(registerSSN.getText());
            String name = registerUsername.getText();
            String password = registerPassword.getText();
            int age = Integer.parseInt(registerAge.getText());
            boolean diabetic = isDiabetic.isSelected();
            boolean obese = isDiabetic.isSelected();
            Appointee appointee = new Appointee(ssn, password, name, age, diabetic, obese, false);
            sw.writeAppointee(appointee);
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Please make sure the values you entered are correct!");
        } catch (IOException ex) {
            Logger.getLogger(Client.class.getName()).log(Level.SEVERE, null, ex);
        }

        // TODO add your handling code here:
    }//GEN-LAST:event_jButton2ActionPerformed

    private void bookButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bookButtonActionPerformed
        if (clientAppointment != null) {
            JOptionPane.showMessageDialog(null, "You already have an appointment booked!");
        } else {
            try {
                if (appointmentModel.getRowCount() == 0) {
                    JOptionPane.showMessageDialog(null, "There are no appointments to book!");
                    return;
                }
                int id = Integer.parseInt(appointmentIDTextField.getText());
                for (Appointment appointment : appointments) {
                    if (appointment.getAppointmentID() == id) {
                        clientAppointment = appointment;
                        sw.writeAppointment(clientAppointment);
                        cancelAppointmentButton.setEnabled(true);
                        bookButton.setEnabled(false);
                        yourAppointments.setText(appointment.toString());
                        return;
                    }
                }

                System.out.println("Booking successful!");
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(null, "Please enter an ID in the specified field!");
            } catch (IOException ex) {
                Logger.getLogger(Client.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

        // TODO add your handling code here:
    }//GEN-LAST:event_bookButtonActionPerformed

    private void cancelAppointmentButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelAppointmentButtonActionPerformed
        try {
            int id = Integer.parseInt(appointmentIDTextField.getText());
            sw.writeAppointment(clientAppointment);
            clientAppointment = null;
            JOptionPane.showMessageDialog(null, "Appointment cancelled!");
            cancelAppointmentButton.setEnabled(false);
            bookButton.setEnabled(true);
            yourAppointments.setText("You have no appointments.");
            return;

        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Please enter an ID in the specified field!");
        } catch (IOException ex) {
            Logger.getLogger(Client.class.getName()).log(Level.SEVERE, null, ex);
        }

        cancelAppointmentButton.setEnabled(false);
        bookButton.setEnabled(true);

        // TODO add your handling code here:
    }//GEN-LAST:event_cancelAppointmentButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */

        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {

                new Client().setVisible(true);
            }
        });

    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField appointmentIDTextField;
    private javax.swing.JTable appointmentTable;
    private javax.swing.JButton bookButton;
    private javax.swing.JButton cancelAppointmentButton;
    private javax.swing.JCheckBox isDiabetic;
    private javax.swing.JCheckBox isObese;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextField loginPassword;
    private javax.swing.JTextField loginUser;
    private javax.swing.JTextField registerAge;
    private javax.swing.JTextField registerPassword;
    private javax.swing.JTextField registerSSN;
    private javax.swing.JTextField registerUsername;
    private javax.swing.JLabel yourAppointments;
    // End of variables declaration//GEN-END:variables
}

class ClientThread extends Thread {

    @Override
    public void run() {

    }
}

class ServerReader extends Thread {

    Socket s;
    ObjectInputStream ois;
    ServerWriter sw;

    public ServerReader(Socket s, ServerWriter sw) throws IOException {
        this.s = s;
        ois = new ObjectInputStream(s.getInputStream());
        this.sw = sw;
    }

    @Override
    public void run() {
        System.out.println("Server reader started!");
        Object o;
        Appointee appointee;
        Appointment appointment;
        VaccineCenter vc;
        while (true) {
            try {
                o = ois.readObject();
                System.out.println("Object read from server!");
                if (o instanceof Appointment) { // Handle Appointment
                    System.out.println("Object is of type Appointment!");
                    appointment = (Appointment) o;
                    clientAppointment = appointment;
                    System.out.println("Appointment Received!");
                    JOptionPane.showMessageDialog(null, "Appointment Booked from server!");
                    o = null;
                } else if (o instanceof VaccineCenter) { // Handle Vaccine center, show appointments and help book
                    System.out.println("Object is of type Vaccine Center!");
                    vc = (VaccineCenter) o;
                    o = null;
                } else if (o instanceof Appointee) { // Registeration / Login confirmed, store info of appointee.
                    System.out.println("Object is of type Appointee!");
                    appointee = (Appointee) o;
                    Client.clientAppointee = appointee;
                    System.out.println("Appointee to String: \n" + appointee.toString());
                    if (appointee.isLogin()) {
                        System.out.println("Login complete!");
                    } else {
                        System.out.println("Registration complete!");
                    }
                    o = null;
                } else if (o instanceof ArrayList) { // Handle appointment update here
                    System.out.println("Object is of type ArrayList!");
                    Client.vcList_server = (ArrayList) o;
                    VaccineCenter vcServer;
                    if (!Client.vcList_server.isEmpty() && Client.vcList_server.get(0) instanceof VaccineCenter) {
                        System.out.println("It enters here! Should delete rows from table.");
                        for (int i = 0; i < Client.appointmentModel.getRowCount(); i++) {
                            Client.appointmentModel.removeRow(i);
                        }
                        System.out.println("Rows deleted.");
                        System.out.println("List of type VaccineCenter received from server!");
                        for (int i = 0; i < Client.vcList_server.size(); i++) {
                            vcServer = (VaccineCenter) Client.vcList_server.get(i);
                            Client.appointments = vcServer.getDates();
                            for (Appointment a : Client.appointments) {
                                if (Client.clientAppointee.getPriority() >= a.getAppointmentPriority() && !a.isBooked()) {
                                    Object[] row = {a.getAppointmentID(), vcServer.getName(), vcServer.getVaccine().getName(), a.getDates()[0]};
                                    Client.appointmentModel.addRow(row);
                                }
                            }
                            System.out.println("Vaccine Center name: " + vcServer.getName()
                                    + "\nVaccine Center appointments: "
                            );
                            for (int j = 0; j < vcServer.getDates().size(); j++) {
                                System.out.println("Vaccine at Vaccine Center: "
                                        + vcServer.getDates().get(i).getV().getName());
                                System.out.println("Dates: ");
                                for (int k = 0; k < vcServer.getDates().get(i).getDates().length; k++) {
                                    System.out.println(vcServer.getDates().get(i).getDates()[k]);
                                }
                            }
                        }
                    }
                    o = null;
                } else if (o instanceof AppointeeNotFound) {
                    System.out.println("AppointeeNotFound exception received from server.");
                    JOptionPane.showMessageDialog(null, "Wrong Username / Password!");
                    o = null;
                } else if (o == null) {
                    // JOptionPane.showMessageDialog(null, "The appointment you are trying to book is no longer available!");
                }
            } catch (IOException ex) {

            } catch (ClassNotFoundException ex) {

            }
        }
    }

}

class ServerWriter {

    Socket s;
    ObjectOutputStream oos;
    ServerReader sr;

    public ServerWriter(Socket s) throws IOException {
        System.out.println("Server writer created!");
        this.s = s;
        oos = new ObjectOutputStream(s.getOutputStream());
    }

    public void writeAppointment(Appointment appointment) throws IOException {
        oos.writeObject(appointment);
        oos.flush();
    }

    public void writeAppointee(Appointee appointee) throws IOException {
        oos.writeObject(appointee);
        oos.flush();
    }

}
